#include <GL/glut.h>
#include <iostream>
#include <cmath>

// Function to implement Bresenham's line drawing algorithm for a dashed line
void drawDashedLineBresenham(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int sx = (x2 >= x1) ? 1 : -1;
    int sy = (y2 >= y1) ? 1 : -1;

    bool isSteep = dy > dx;
    if (isSteep) {
        std::swap(dx, dy);
    }

    int err = 2 * dy - dx;
    int x = x1, y = y1;

    glBegin(GL_POINTS);
    for (int i = 0; i <= dx; i++) {
        // Draw point for every few steps to create a dashed effect
        if ((i / 10) % 2 == 0) { // Adjust 10 to change dash length
            glVertex2i(x, y);
        }
        while (err > 0) {
            if (isSteep) {
                x += sx;
            } else {
                y += sy;
            }
            err -= 2 * dx;
        }
        if (isSteep) {
            y += sy;
        } else {
            x += sx;
        }
        err += 2 * dy;
    }
    glEnd();
    glFlush();
}

// OpenGL display callback function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Example dashed line coordinates
    int x1 = 50, y1 = 100, x2 = 300, y2 = 400;
    drawDashedLineBresenham(x1, y1, x2, y2);
}

// Initialize OpenGL settings
void initOpenGL() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // Set background color to black
    glColor3f(1.0, 1.0, 1.0);          // Set drawing color to white
    glPointSize(2.0);                  // Set point size
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 500.0, 0.0, 500.0); // Set the coordinate system
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bresenham Dashed Line Drawing Algorithm");
    initOpenGL();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
